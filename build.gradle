buildscript {
	ext { springBootVersion = '2.0.0.BUILD-SNAPSHOT' }
	repositories {
		mavenCentral()
		maven { url "https://repo.spring.io/snapshot" }
		maven { url "https://repo.spring.io/milestone" }
	}
	dependencies {
		classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
		// jooq codegen
		classpath 'org.jooq:jooq-codegen:3.10.6'
		classpath 'com.h2database:h2:1.4.196'
	}
}

apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'
apply plugin: 'jacoco'

version = '0.0.1-SNAPSHOT'
sourceCompatibility = 1.8

repositories {
	mavenCentral()
	maven { url "https://repo.spring.io/snapshot" }
	maven { url "https://repo.spring.io/milestone" }
}


dependencies {
	// spring
	compile('org.springframework.boot:spring-boot-starter-data-jpa')
	compile('org.springframework.boot:spring-boot-starter-security')
	compile('org.springframework.boot:spring-boot-starter-thymeleaf')
	compile('org.springframework.boot:spring-boot-starter-web')
	compile("org.springframework.boot:spring-boot-devtools")

	// h2 databse
	compile('com.h2database:h2:1.4.196')

	//ThymeleafでSpring Securityの機能を使うために追加
	compile('org.thymeleaf.extras:thymeleaf-extras-springsecurity4')

	//よく使うライブラリたち
	compile 'org.projectlombok:lombok:1.16.8'
	compile 'org.apache.commons:commons-lang3:3.4'
	compile 'org.apache.commons:commons-io:1.3.2'
	compile 'org.apache.commons:commons-collections4:4.1'

	// csv
	compile 'com.fasterxml.jackson.dataformat:jackson-dataformat-csv:2.9.5'
	
	// jooq
	compile 'org.jooq:jooq:3.10.6'
	runtime 'org.jooq:jooq-codegen:3.10.6'

	// test
	testCompile group: 'org.jmockit', name: 'jmockit', version: '1.30'
	testCompile('org.springframework.boot:spring-boot-starter-test')
	testCompile('com.ninja-squad:DbSetup:2.0.0')
	testCompile group: 'org.dbunit', name: 'dbunit', version: '2.4.3'

	// freemarker
	testCompile group: 'org.freemarker', name: 'freemarker', version: '2.3.23'
}

jacoco { toolVersion = "0.7.5.+" }

//For Eclipse IDE only
eclipse {
	classpath {
		file {
			beforeMerged { classpath ->
				classpath.entries.removeAll { it.path == 'src/generator/java' }
				classpath.entries.removeAll { it.path == 'src/generator/resources' }
			}
			whenMerged { classpath ->
				def genSrc = new org.gradle.plugins.ide.eclipse.model.SourceFolder('src/generator/java', null)
				def genResources = new org.gradle.plugins.ide.eclipse.model.SourceFolder('src/generator/resources', null)
				classpath.entries.add(genSrc)
				classpath.entries.add(genResources)
			}
		}
	}
}

// JaCoCo coverage reports
jacoco {
	applyTo(tasks.withType(JavaExec))
}
test {
	jacoco {
		enabled = true
		destinationFile = file('build/reports/jacoco/jacoco.exec')
	}
}
task jacocoReport(type: JacocoReport) {
	executionData test
	sourceSets project.sourceSets.main
}

// jooq codegen
task jooqCodegen <<{
	// make xml
	def writer = new StringWriter()
	def xml = new groovy.xml.MarkupBuilder(writer)
			.configuration('xmlns': 'http://www.jooq.org/xsd/jooq-codegen-3.10.0.xsd') {
				jdbc() {
					driver('org.h2.Driver')
					url('jdbc:h2:file:./database/test')
					user('user')
					password('user')
				}
				generator() {
					database() { includes('public.*') }
					generate([:]) {
						// i dont need Indexes.java
						indexes false
						// i dont need ClobalObjects like Tables.java, Sequence.java....
						globalObjectReferences false
						// use Java8 API (LocalDateTime...)
						javaTimeTypes true
						// i dont need POJO classes
						pojos false
						// i dont need Database Access Objects
						daos false
					}
					target() {
						packageName('com.showka.table')
						directory('src/main/java')
					}
					strategy() {
						matchers(){
							tables(){
								table(){
									tableIdentifier() { transform('LOWER') }
									tableClass(){ transform('UPPER') }
									recordClass(){
										transform('UPPER')
										expression('$0_RECORD')
									}
								}
							}
							fields(){
								field() {
									fieldIdentifier() { transform('LOWER') }
									fieldMember() { transform('LOWER') }
								}
							}
						} }
				}
			}

	// run the jooq codegen
	org.jooq.util.GenerationTool.generate(
			javax.xml.bind.JAXB.unmarshal(new StringReader(writer.toString()), org.jooq.util.jaxb.Configuration.class)
			)
}
