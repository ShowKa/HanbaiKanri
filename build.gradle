buildscript {
	ext {
		springBootVersion = '2.0.0.BUILD-SNAPSHOT'
	}
	repositories {
		mavenCentral()
		maven { url "https://repo.spring.io/snapshot" }
		maven { url "https://repo.spring.io/milestone" }
	}
	dependencies {
		classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
	}
}

apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'
apply plugin: 'jacoco'

version = '0.0.1-SNAPSHOT'
sourceCompatibility = 1.8

repositories {
	mavenCentral()
	maven { url "https://repo.spring.io/snapshot" }
	maven { url "https://repo.spring.io/milestone" }
}


dependencies {
	compile('org.springframework.boot:spring-boot-starter-data-jpa')
	compile('org.springframework.boot:spring-boot-starter-security')
	compile('org.springframework.boot:spring-boot-starter-thymeleaf')
	compile('org.springframework.boot:spring-boot-starter-web')
	compile("org.springframework.boot:spring-boot-devtools")
	compile('com.h2database:h2')

	//ThymeleafでSpring Securityの機能を使うために追加
	compile('org.thymeleaf.extras:thymeleaf-extras-springsecurity4')

	//よく使うライブラリたち
	compile 'org.projectlombok:lombok:1.16.8'
	compile 'org.apache.commons:commons-csv:1.2'
	compile 'org.apache.commons:commons-lang3:3.4'
	compile 'org.apache.commons:commons-io:1.3.2'
	compile 'org.apache.commons:commons-collections4:4.1'
	
	// jooq
	compile 'org.jooq:jooq:3.10.4'
	
	// test
	testCompile group: 'org.jmockit', name: 'jmockit', version: '1.30'	
	testCompile('org.springframework.boot:spring-boot-starter-test')
	testCompile('com.ninja-squad:DbSetup:2.0.0')
	testCompile group: 'org.dbunit', name: 'dbunit', version: '2.4.3'

	// freemarker
	testCompile group: 'org.freemarker', name: 'freemarker', version: '2.3.23'
}

jacoco {
    toolVersion = "0.7.5.+"
}

//For Eclipse IDE only
eclipse {

  classpath {
  	file {

  	  beforeMerged { classpath ->
  	    classpath.entries.removeAll { it.path == 'src/generator/java' }
  	    classpath.entries.removeAll { it.path == 'src/generator/resources' }
  	  }

  	  whenMerged { classpath ->
  	    def genSrc = new org.gradle.plugins.ide.eclipse.model.SourceFolder('src/generator/java', null)
  	    def genResources = new org.gradle.plugins.ide.eclipse.model.SourceFolder('src/generator/resources', null)
  	    classpath.entries.add(genSrc)
  	    classpath.entries.add(genResources)
  	  }

  	}
  }
}

// JaCoCo coverage reports
jacoco {
  applyTo(tasks.withType(JavaExec))
}
test {
  jacoco {
    enabled = true
    destinationFile = file('build/reports/jacoco/jacoco.exec')
  }
}
task jacocoReport(type: JacocoReport) {
  executionData test
  sourceSets project.sourceSets.main
}
